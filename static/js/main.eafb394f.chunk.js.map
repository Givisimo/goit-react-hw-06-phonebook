{"version":3,"sources":["ContactList/ContactList.jsx","utils/getFilteredContacts.js","ContactForm/ContactForm.jsx","Filter/Filter.jsx","Phonebook/Phonebook.jsx","App/App.jsx","index.js"],"names":["ContactList","contacts","onDelete","map","contact","key","id","name","number","type","onClick","getFilteredContacts","allContacts","filter","item","toUpperCase","includes","ContactForm","onSaveContact","nameId","uuid","useState","setName","numberId","setNumber","htmlFor","onChange","e","target","value","newContact","isNaN","alert","Filter","searchId","handleFilter","Phonebook","contactsList","setContacts","useEffect","contactsFromStorage","JSON","parse","localStorage","getItem","setItem","stringify","setFilter","filteredContact","find","currentTarget","contactId","App","className","ReactDOM","render","document","getElementById"],"mappings":"gRA2BeA,EAxBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAb,OAClB,4BACGD,EAASE,KAAI,SAAAC,GAAO,OACnB,wBAAIC,IAAKD,EAAQE,IACdF,EAAQG,KADX,IACkBH,EAAQI,OACxB,4BAAQC,KAAK,SAASC,QAAS,kBAAMR,EAASE,EAAQE,MAAtD,gBCFOK,EANa,SAACC,EAAaC,GACxC,OAAOD,EAAYC,QAAO,SAAAC,GAAI,OAC5BA,EAAKP,KAAKQ,cAAcC,SAASH,EAAOE,mB,OC2E7BE,EAzEK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEfC,EAASC,MAF0B,EAGjBC,mBAAS,IAHQ,mBAGlCd,EAHkC,KAG5Be,EAH4B,KAUnCC,EAAWH,MAVwB,EAWbC,mBAAS,IAXI,mBAWlCb,EAXkC,KAW1BgB,EAX0B,KAqCzC,OACE,8BACE,2BAAOC,QAASN,GACd,oCACA,2BACEV,KAAK,OACLiB,SAtCiB,SAAAC,GACvBL,EAAQK,EAAEC,OAAOC,QAsCXtB,KAAK,OACLsB,MAAOtB,EACPD,GAAIa,KAGR,2BAAOM,QAASF,GACd,sCACA,2BACEd,KAAK,OACLiB,SAzCmB,SAAAC,GACzBH,EAAUG,EAAEC,OAAOC,QAyCbtB,KAAK,SACLsB,MAAOrB,EACPF,GAAIiB,KAIR,2BACE,4BAAQd,KAAK,SAASC,QA7CR,WAClB,IAAMoB,EAAa,CACjBxB,GAAIc,MACJb,KAAMA,EACNC,OAAQA,GAELD,GAASC,EAKVuB,MAAMvB,GACRwB,MAAM,mBAGRd,EAAc,eAAKY,IAEnBR,EAAQ,IACRE,EAAU,KAXRQ,MAAM,kCAsCJ,kBCzCOC,EArBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,aAActB,EAA3B,EAA2BA,OAA3B,OACb,oCACE,mDACA,2BAAOY,QAASS,GACd,2BACEzB,KAAK,OACLiB,SAAUS,EACV5B,KAAK,SACLsB,MAAOhB,EACPP,GAAI4B,O,OCiDGE,EArDG,WAAM,MAGUf,mBAASgB,GAHnB,mBAGfpC,EAHe,KAGLqC,EAHK,KAKtBC,qBAAU,WACR,IAAMC,EAAsBC,KAAKC,MAAMC,aAAaC,QAAQ,aACvDJ,GAGLF,EAAY,YAAIE,MACf,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,WAAYJ,KAAKK,UAAU7C,MAC/C,CAACA,IAIJ,IAgBMiC,EAAWd,MAnCK,EAoCMC,mBAAS,IApCf,mBAoCfR,EApCe,KAoCPkC,EApCO,KAwChBC,EAAkBrC,EAAoBV,EAAUY,GAEtD,OACE,6BACE,yCACA,kBAAC,EAAD,CAAaK,cA1BG,SAAAd,GACdH,EAASgD,MAAK,SAAAnC,GAAI,OAAIA,EAAKP,OAASH,EAAQG,QAC9CyB,MAAM,GAAD,OAAI5B,EAAQG,KAAZ,4BAGP+B,EAAY,GAAD,mBAAKrC,GAAL,CAAeG,QAsBxB,wCACA,kBAAC,EAAD,CAAQ8B,SAAUA,EAAUC,aAVX,SAAAR,GACnBoB,EAAUpB,EAAEuB,cAAcrB,QASgChB,OAAQA,IAChE,kBAAC,EAAD,CAAaZ,SAAU+C,EAAiB9C,SAnBtB,SAAAiD,GACpBb,EAAYrC,EAASY,QAAO,SAAAT,GAAO,OAAIA,EAAQE,KAAO6C,WC7B3CC,EALH,kBACV,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCDJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.eafb394f.chunk.js","sourcesContent":["import React from 'react';\nimport T from 'prop-types';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <ul>\n    {contacts.map(contact => (\n      <li key={contact.id}>\n        {contact.name}:{contact.number}\n        <button type=\"button\" onClick={() => onDelete(contact.id)}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: T.arrayOf(\n    T.shape({\n      id: T.string.isRequired,\n      name: T.string.isRequired,\n      number: T.string.isRequired,\n    }),\n  ).isRequired,\n  onDelete: T.func.isRequired,\n};\n\nexport default ContactList;\n","const getFilteredContacts = (allContacts, filter) => {\n  return allContacts.filter(item =>\n    item.name.toUpperCase().includes(filter.toUpperCase()),\n  );\n};\n\nexport default getFilteredContacts;\n","import React, { useState } from 'react';\nimport uuid from 'uuid/v1';\nimport T from 'prop-types';\n\nconst ContactForm = ({ onSaveContact }) => {\n  /*NAME*/\n  const nameId = uuid();\n  const [name, setName] = useState('');\n\n  const handleNameChange = e => {\n    setName(e.target.value);\n  };\n\n  /*NUMBER*/\n  const numberId = uuid();\n  const [number, setNumber] = useState('');\n  const handleNumberChange = e => {\n    setNumber(e.target.value);\n  };\n\n  const handleClick = () => {\n    const newContact = {\n      id: uuid(),\n      name: name,\n      number: number,\n    };\n    if (!name || !number) {\n      alert('Name and number is required!');\n      return;\n    }\n\n    if (isNaN(number)) {\n      alert('Invalid number');\n      return;\n    }\n    onSaveContact({ ...newContact });\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form>\n      <label htmlFor={nameId}>\n        <h2>Name</h2>\n        <input\n          type=\"text\"\n          onChange={handleNameChange}\n          name=\"name\"\n          value={name}\n          id={nameId}\n        />\n      </label>\n      <label htmlFor={numberId}>\n        <h2>Number</h2>\n        <input\n          type=\"text\"\n          onChange={handleNumberChange}\n          name=\"number\"\n          value={number}\n          id={numberId}\n        />\n      </label>\n\n      <p>\n        <button type=\"button\" onClick={handleClick}>\n          Add contact\n        </button>\n      </p>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSaveContact: T.func.isRequired,\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport T from 'prop-types';\n\nconst Filter = ({ searchId, handleFilter, filter }) => (\n  <>\n    <p>Find contact by name</p>\n    <label htmlFor={searchId}>\n      <input\n        type=\"text\"\n        onChange={handleFilter}\n        name=\"filter\"\n        value={filter}\n        id={searchId}\n      />\n    </label>\n  </>\n);\n\nFilter.propTypes = {\n  searchId: T.string.isRequired,\n  handleFilter: T.func.isRequired,\n  filter: T.string.isRequired,\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from 'react';\nimport uuid from 'uuid/v1';\nimport ContactList from '../ContactList/ContactList';\nimport getFilteredContacts from '../utils/getFilteredContacts';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport contactsList from '../data/contacts';\n\nconst Phonebook = () => {\n  /*INITIAL STATE*/\n\n  const [contacts, setContacts] = useState(contactsList);\n\n  useEffect(() => {\n    const contactsFromStorage = JSON.parse(localStorage.getItem('contacts'));\n    if (!contactsFromStorage) {\n      return;\n    }\n    setContacts([...contactsFromStorage]);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  /*SAVE*/\n\n  const saveContact = contact => {\n    if (contacts.find(item => item.name === contact.name)) {\n      alert(`${contact.name} is already in contacts`);\n      return;\n    }\n    setContacts([...contacts, contact]);\n  };\n\n  /*DELETE*/\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  /*FILTER*/\n\n  const searchId = uuid();\n  const [filter, setFilter] = useState('');\n  const handleFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n  const filteredContact = getFilteredContacts(contacts, filter);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSaveContact={saveContact} />\n      <h2>Contacts</h2>\n      <Filter searchId={searchId} handleFilter={handleFilter} filter={filter} />\n      <ContactList contacts={filteredContact} onDelete={deleteContact} />\n    </div>\n  );\n};\n\nexport default Phonebook;\n","import React from 'react';\nimport './App.css';\nimport Phonebook from '../Phonebook/Phonebook';\n\nconst App = () => (\n  <div className=\"App\">\n    <Phonebook />\n  </div>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}